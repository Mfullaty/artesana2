datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  origin           String
  moisture         String?
  color            String?
  form             String
  cultivation      String
  cultivationType  String?
  purity           String?
  grades           String?
  measurement      String
  inStock          Int
  images           String[] // Array to store multiple image URLs
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Quote {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Contact Information
  fullName         String
  email            String
  phone            String?
  companyName      String?
  website          String?
  needFor          String
  
  // Product Details
  product          String
  productType      String
  cultivationType  String[]
  processing       String?
  
  // Quantity
  unit            String
  volume          String
  purchaseType    String
  
  // Delivery
  deliveryAddress  String
  incoterm        String?
  deliveryDate    DateTime
  deliveryFrequency String
  
  // Additional Info
  additionalInfo   String?
  status          String     @default("PENDING") // PENDING, APPROVED, REJECTED
  files            String[]

  @@map("quote_requests")
}

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String
  message String
  date    DateTime
  status  String
}